// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.
// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:
// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }
// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = [
    {
        title: "All Hope Is Gone",
        artist: "Slipknot",
        year: "2009"
    },
    {
        title: "Spillways",
        artist: "Ghost",
        year: "2022"
    },
    {
        title: "Deceivers",
        artist: "Arch Enemy",
        year: "2022"
    },
    {
        title: "Sabaton",
        artist: "Heroes",
        year: "2014"
    },
]

musicCollection[Symbol.iterator] = function () {
    return {
        current: 0,
        last: musicCollection.length,
        next() {
            return this.current < this.last
                ? { done: false, value: musicCollection[this.current++] }
                : { done: true }
        }
    }
}

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
// Необходимо создать систему управления этими заказами, которая позволит:
// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.
// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.
// Повара и их специализации:
// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:
// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:
// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

// Создаем Map для отображения поваров и их специализации
const chefs = new Map([
    ['Виктор', 'Пицца'],
    ['Ольга', 'Суши'],
    ['Дмитрий', 'Десерты'],
])

// Создаем Map для отображения блюд и поваров, готовящих их
const dishes = new Map([
    ['Пицца "Маргарита"', 'Виктор'],
    ['Пицца "Пепперони"', 'Виктор'],
    ['Суши "Филадельфия"', 'Ольга'],
    ['Суши "Калифорния"', 'Ольга'],
    ['Тирамису', 'Дмитрий'],
    ['Чизкейк', 'Дмитрий'],
])

// Создаем Map для отображения клиента и заказанного блюда
const orders = new Map()

// Функция для добавления заказа клиента
function addOrder(client, dish) {
    if (!orders.has(client)) {
        orders.set(client, [])
    }
    orders.get(client).push(dish)
}

addOrder('Алексей', 'Пицца "Пепперони"')
addOrder('Алексей', 'Тирамису')
addOrder('Мария', 'Суши "Калифорния"');
addOrder('Мария', 'Пицца "Маргарита"');
addOrder('Ирина', 'Чизкейк');

chefs.forEach((value, key) => {
    console.log(`${key} - специализация: ${value}`)
})

dishes.forEach((value, key) => {
    console.log(`${key} - повар: ${value}`)
})

orders.forEach((value, key) => {
    console.log(`${key} заказал(a): ${value.join(' и ')}.`)
})